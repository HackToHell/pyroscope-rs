use super::error::{BackendError, Result};
use super::types::{Backend, State};

use rbspy::{sampler::Sampler, OutputFormat, StackTrace};

use std::io::Write;
use std::sync::mpsc::{channel, sync_channel, Receiver, Sender, SyncSender};

// TODO: handle errors returned from rx2
// TODO: sync_channel size
// TODO: handle unwraps
// TODO: handle anyhow error type

/// Rbspy Configuration
#[derive(Debug)]
pub struct RbspyConfig {
    /// Process to monitor
    pid: Option<i32>,
    /// Sampling rate
    sample_rate: u32,
    /// Lock Process while sampling
    lock_process: bool,
    /// Profiling duration. None for infinite.
    time_limit: Option<core::time::Duration>,
    /// Include subprocesses
    with_subprocesses: bool,
}

impl Default for RbspyConfig {
    fn default() -> Self {
        RbspyConfig {
            pid: None,
            sample_rate: 100,
            lock_process: false,
            time_limit: None,
            with_subprocesses: false,
        }
    }
}

impl RbspyConfig {
    /// Create a new RbspyConfig
    pub fn new(
        pid: i32, sample_rate: u32, lock_process: bool, time_limit: Option<core::time::Duration>,
        with_subprocesses: bool,
    ) -> Self {
        RbspyConfig {
            pid: Some(pid),
            sample_rate,
            lock_process,
            time_limit,
            with_subprocesses,
        }
    }
}

/// Rbspy Backend
#[derive(Default)]
pub struct Rbspy {
    sampler: Option<Sampler>,
    stack_receiver: Option<Receiver<StackTrace>>,
    error_receiver: Option<Receiver<std::result::Result<(), anyhow::Error>>>,
    state: State,

    config: RbspyConfig,
}

impl std::fmt::Debug for Rbspy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Rbspy Backend")
    }
}

impl Rbspy {
    pub fn new(config: RbspyConfig) -> Self {
        Rbspy {
            sampler: None,
            stack_receiver: None,
            error_receiver: None,
            state: State::Uninitialized,
            config,
        }
    }
}

impl Backend for Rbspy {
    fn get_state(&self) -> State {
        self.state
    }

    fn spy_name(&self) -> Result<String> {
        Ok("rbspy".to_string())
    }

    fn sample_rate(&self) -> Result<u32> {
        Ok(self.config.sample_rate)
    }

    fn initialize(&mut self) -> Result<()> {
        // Check if Backend is Uninitialized
        if self.state != State::Uninitialized {
            return Err(BackendError::new("Rbspy: Backend is already Initialized"));
        }

        if self.config.pid.is_none() {
            return Err(BackendError::new("Rbspy: No Process ID Specified"));
        }

        // Create Sampler
        self.sampler = Some(Sampler::new(
            self.config.pid.unwrap(), // unwrap is safe because of check above
            self.config.sample_rate,
            self.config.lock_process,
            self.config.time_limit,
            self.config.with_subprocesses,
        ));

        // Set State to Ready
        self.state = State::Ready;

        Ok(())
    }

    fn start(&mut self) -> Result<()> {
        // Check if Backend is Ready
        if self.state != State::Ready {
            return Err(BackendError::new("Rbspy: Backend is not Ready"));
        }

        // Channel for Errors generated by the RubySpy Sampler
        let (error_sender, error_receiver): (
            Sender<std::result::Result<(), anyhow::Error>>,
            Receiver<std::result::Result<(), anyhow::Error>>,
        ) = channel();

        // Channel for StackTraces generated by the RubySpy Sampler
        let (stack_sender, stack_receiver): (SyncSender<StackTrace>, Receiver<StackTrace>) =
            sync_channel(1000);

        // Set Error and Stack Receivers
        self.stack_receiver = Some(stack_receiver);
        self.error_receiver = Some(error_receiver);

        // Get the Sampler
        let sampler = self
            .sampler
            .as_mut()
            .ok_or_else(|| BackendError::new("Rbspy: Sampler is not set"))?;

        // Start the Sampler
        sampler.start(stack_sender, error_sender)?;

        // Set State to Running
        self.state = State::Running;

        Ok(())
    }

    fn stop(&mut self) -> Result<()> {
        // Check if Backend is Running
        if self.state != State::Running {
            return Err(BackendError::new("Rbspy: Backend is not Running"));
        }

        // Stop Sampler
        self.sampler
            .as_mut()
            .ok_or_else(|| BackendError::new("Rbspy: Sampler is not set"))?
            .stop();

        // Set State to Running
        self.state = State::Ready;

        Ok(())
    }

    fn report(&mut self) -> Result<Vec<u8>> {
        // Check if Backend is Running
        if self.state != State::Running {
            return Err(BackendError::new("Rbspy: Backend is not Running"));
        }

        // Collect the StackTrace from the receiver
        let stack_trace = self
            .stack_receiver
            .as_ref()
            .ok_or_else(|| BackendError::new("Rbspy: Rx is not set"))?
            .try_iter();

        // Create a new OutputFormat (collapsed). This is an object provided by rbspy.
        // The argument should be ignored.
        let mut outputter = OutputFormat::collapsed.outputter(0.1);

        // Iterate over the StackTrace
        for trace in stack_trace {
            // Write the StackTrace to the OutputFormat
            outputter.record(&trace)?;
        }

        // buffer to store the output
        let mut buffer: Vec<u8> = Vec::new();

        // Create a new writer
        let mut writer = RbspyWriter::new(&mut buffer);

        // Push the outputter into our writer
        outputter.complete(&mut writer)?;

        // Flush the Writer
        writer.flush()?;

        // Return the writer's buffer
        Ok(buffer)
    }
}

/// Rubyspy Writer
/// This object is used to write the output of the rbspy sampler to a data buffer
struct RbspyWriter<'a> {
    data: Vec<u8>,
    buffer: &'a mut Vec<u8>,
}

impl<'a> RbspyWriter<'a> {
    /// Create a new RbspyWriter
    pub fn new(buffer: &'a mut Vec<u8>) -> Self {
        RbspyWriter {
            data: Vec::new(),
            buffer,
        }
    }
}

/// Implement Writer for Rbspy
impl<'a> std::io::Write for RbspyWriter<'a> {
    fn write(&mut self, buf: &[u8]) -> std::io::Result<usize> {
        // push the data to the buffer
        self.data.extend_from_slice(buf);

        // return the number of bytes written
        Ok(buf.len())
    }

    fn flush(&mut self) -> std::io::Result<()> {
        // flush the buffer
        self.buffer.extend_from_slice(&self.data);

        Ok(())
    }
}

#[cfg(test)]
mod test_rbspy_writer {
    use super::RbspyWriter;
    use std::io::Write;

    #[test]
    fn test_rbspy_writer() {
        let mut buffer: Vec<u8> = Vec::new();
        let mut writer = RbspyWriter::new(&mut buffer);

        writer.write(b"hello").unwrap();
        writer.write(b"world").unwrap();
        writer.flush().unwrap();

        assert_eq!(buffer, b"helloworld".to_vec());
    }
}
